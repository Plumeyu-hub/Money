package com.snxun.book.greendaolib.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.snxun.book.greendaolib.table.UserTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_TABLE".
*/
public class UserTableDao extends AbstractDao<UserTable, Long> {

    public static final String TABLENAME = "USER_TABLE";

    /**
     * Properties of entity UserTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Account = new Property(1, String.class, "account", false, "ACCOUNT");
        public final static Property Pswd = new Property(2, String.class, "pswd", false, "PSWD");
        public final static Property PswdQuestion = new Property(3, String.class, "pswdQuestion", false, "PSWD_QUESTION");
        public final static Property PswdAnswer = new Property(4, String.class, "pswdAnswer", false, "PSWD_ANSWER");
    }


    public UserTableDao(DaoConfig config) {
        super(config);
    }
    
    public UserTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ACCOUNT\" TEXT NOT NULL UNIQUE ," + // 1: account
                "\"PSWD\" TEXT," + // 2: pswd
                "\"PSWD_QUESTION\" TEXT," + // 3: pswdQuestion
                "\"PSWD_ANSWER\" TEXT);"); // 4: pswdAnswer
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getAccount());
 
        String pswd = entity.getPswd();
        if (pswd != null) {
            stmt.bindString(3, pswd);
        }
 
        String pswdQuestion = entity.getPswdQuestion();
        if (pswdQuestion != null) {
            stmt.bindString(4, pswdQuestion);
        }
 
        String pswdAnswer = entity.getPswdAnswer();
        if (pswdAnswer != null) {
            stmt.bindString(5, pswdAnswer);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getAccount());
 
        String pswd = entity.getPswd();
        if (pswd != null) {
            stmt.bindString(3, pswd);
        }
 
        String pswdQuestion = entity.getPswdQuestion();
        if (pswdQuestion != null) {
            stmt.bindString(4, pswdQuestion);
        }
 
        String pswdAnswer = entity.getPswdAnswer();
        if (pswdAnswer != null) {
            stmt.bindString(5, pswdAnswer);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserTable readEntity(Cursor cursor, int offset) {
        UserTable entity = new UserTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // account
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pswd
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pswdQuestion
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // pswdAnswer
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAccount(cursor.getString(offset + 1));
        entity.setPswd(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPswdQuestion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPswdAnswer(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserTable entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
